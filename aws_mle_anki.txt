"What is the main goal of Task Statement 2.1: ""Choose a modeling approach"" in the AWS ML Engineer exam?";"To select the most appropriate ML algorithm, model, AWS AI service, or tool (like JumpStart/Bedrock) based on business requirements, data characteristics, cost, latency, interpretability, and other constraints within the AWS ecosystem."
"What are the main categories of AWS tools to consider when choosing a modeling approach?";"1. AWS Managed AI Services (Rekognition, Transcribe, etc.)<br>2. SageMaker Built-in Algorithms (XGBoost, Linear Learner, etc.)<br>3. SageMaker JumpStart (Pre-trained models, solutions)<br>4. Amazon Bedrock (Foundation Models via API)<br>5. Custom Models (Using SageMaker Script Mode)"
"When should you prioritize using an AWS Managed AI Service (like Rekognition, Transcribe, Comprehend)?";"When the task is a common, well-defined problem (image analysis, STT, NLP) that the service handles well, and you want to minimize development time, operational overhead, and potentially cost. Prioritize if you don't need deep customization or lack specific ML expertise/data. (Think ""Build vs. Buy"")."
"What is Amazon Rekognition used for?";"Image and video analysis: Object detection, facial recognition/comparison, text-in-image extraction, content moderation, celebrity recognition."
"What is Amazon Transcribe used for?";"Automatic Speech Recognition (ASR): Converting audio/video speech into text."
"What is Amazon Translate used for?";"Neural machine translation: Translating text between supported languages."
"What is Amazon Comprehend used for?";"Natural Language Processing (NLP): Extracting insights from text like sentiment, entities, key phrases, language, topics."
"What is Amazon Bedrock used for?";"Providing API access to Foundation Models (FMs like LLMs, image generation models) from various providers (Amazon, Anthropic, AI21, Cohere, Stability AI) for generative AI tasks without managing infrastructure."
"What is SageMaker JumpStart primarily used for?";"Accelerating ML development by providing pre-trained models (including FMs), solution templates for common use cases, and example notebooks. Allows for quick deployment and fine-tuning."
"When should you typically use SageMaker Built-in Algorithms?";"When you need to train a standard ML model (e.g., classification, regression, clustering) on your own dataset within SageMaker, leveraging optimized, scalable, and managed algorithm containers. Examples: XGBoost, Linear Learner, K-Means."
"What is SageMaker XGBoost often the best choice for?";"Supervised learning (classification/regression) on structured or tabular data, often providing high accuracy."
"What is SageMaker Linear Learner used for?";"Simple linear regression and binary/multiclass classification tasks. Good baseline model, highly scalable, and interpretable."
"What does ""Interpretability"" or ""Explainability"" mean in model selection?";"The ability to understand why a model makes a certain prediction. It's crucial for debugging, trust, fairness assessment, and regulatory compliance."
"How does the need for high interpretability influence model choice?";"It often favors simpler models (Linear/Logistic Regression, Decision Trees) over complex ""black-box"" models (DNNs, large ensembles). Tools like SageMaker Clarify (using SHAP) can help explain complex models but might require extra effort/analysis."
"What factors are assessed during ""Feasibility Assessment"" for an ML solution?";"1. Clear problem definition?<br>2. Sufficient data quantity?<br>3. Adequate data quality and relevance?<br>4. Availability of labeled data (if supervised)?<br>5. Is ML realistically the best approach (vs. simpler rules)?"
"What aspects should be considered when comparing and selecting ML models/algorithms?";"Problem type (regression, classification, etc.), data characteristics (structured/unstructured, size), required performance (accuracy, latency), interpretability needs, training/inference costs, operational complexity."
"How does cost influence model/algorithm selection?";"Consider: Training cost (instance type/duration), Inference cost (endpoint type, instance uptime/usage), AI Service costs (API calls, data processed). Aim for the most cost-effective solution that meets requirements. May involve trade-offs with performance or complexity."
"Give an example of selecting based on cost.";"Choosing SageMaker Serverless Inference for an endpoint with highly intermittent traffic to avoid paying for idle instances, even if it means occasional cold-start latency. Or using Batch Transform for bulk offline predictions instead of a real-time endpoint."
"What is the key difference in use case between Amazon Bedrock and SageMaker Built-in Algorithms?";"Bedrock provides API access to pre-trained Foundation Models (often for generative tasks) without model management. Built-in algorithms are used to train models (often predictive, classification, clustering) on your specific data within the SageMaker environment."
"What AWS service is specifically designed for time-series forecasting?";"Amazon Forecast."
"What AWS service is specifically designed for building personalized recommendation systems?";"Amazon Personalize."
"What AWS tool helps analyze models for bias and explain predictions?";"SageMaker Clarify."
"Algorithm: XGBoost (SageMaker Built-in)";"Optimized distributed gradient boosting algorithm. Use Case: Excels at supervised learning (classification/regression) on structured/tabular data. Often provides state-of-the-art results."
"Algorithm: Linear Learner (SageMaker Built-in)";"Implements linear regression (predicting continuous values) and logistic regression (binary/multiclass classification). Use Case: Good baseline model, highly scalable, interpretable, suitable for large datasets."
"Algorithm: K-Means (SageMaker Built-in)";"Unsupervised clustering algorithm that partitions data into 'k' distinct clusters based on feature similarity. Use Case: Customer segmentation, document grouping, image compression."
"Algorithm: Object Detection (SageMaker Built-in)";"Supervised computer vision algorithm that identifies and locates multiple objects within an image, outputting bounding boxes and class labels. Use Case: Identifying items in photos, autonomous driving systems, surveillance."
"Algorithm: Image Classification (SageMaker Built-in)";"Supervised computer vision algorithm that assigns a single label (class) to an entire image. Use Case: Tagging photos, medical image analysis (e.g., classifying scans), visual product search."
"Algorithm: Semantic Segmentation (SageMaker Built-in)";"Computer vision algorithm that classifies each pixel in an image into a predefined category. Use Case: Detailed scene understanding, autonomous driving (identifying road vs. sidewalk pixels), medical imaging (identifying tumor pixels)."
"Algorithm: Seq2Seq (Sequence-to-Sequence) (SageMaker Built-in)";"Algorithm typically using RNNs or Transformers to map an input sequence to an output sequence (which can be of different lengths). Use Case: Machine translation, text summarization, question answering."
"Algorithm: BlazingText (SageMaker Built-in)";"Optimized implementation of Word2Vec (generating word embeddings) and Text Classification. Use Case: Learning word representations from large corpora, fast text classification."
"Algorithm: DeepAR (SageMaker Built-in)";"Supervised learning algorithm for time-series forecasting using Recurrent Neural Networks (RNNs). Use Case: Forecasting product demand, server load, energy consumption, web traffic."
"Algorithm: Random Cut Forest (SageMaker Built-in)";"Unsupervised algorithm for anomaly detection. Identifies outlier data points within a dataset. Use Case: Detecting unusual spikes in system metrics, fraud detection, identifying defective products."
"Algorithm: Decision Trees";"Supervised learning algorithm that uses a tree-like structure of decisions to model outcomes. Use Case: Classification and regression. Often used as base learners in ensembles (like Random Forests, XGBoost). Highly interpretable on their own."
"Algorithm: CNNs (Convolutional Neural Networks)";"A class of deep learning models, primarily used for processing visual data (images, video). They learn spatial hierarchies of features. Use Case: Image classification, object detection, facial recognition. Underlie many CV built-in algorithms."
"Algorithm: RNNs (Recurrent Neural Networks) / Transformers";"Classes of deep learning models designed for sequential data (text, time series). RNNs process sequences step-by-step, while Transformers use attention mechanisms. Use Case: NLP tasks (translation, summarization), time-series analysis (e.g., in DeepAR), speech recognition."
"Algorithm: Logistic Regression";"Supervised learning algorithm used for binary or multiclass classification. Models the probability of a discrete outcome using a logistic function. Often implemented via SageMaker Linear Learner."
"Algorithm: Linear Regression";"Supervised learning algorithm used to predict a continuous target variable based on linear relationships with input features. Often implemented via SageMaker Linear Learner."
"ML Problem Type: Regression";"Supervised learning task to predict a continuous numerical value. Examples: Predicting house prices, stock prices, temperature, sales quantity. Key Algorithms: Linear Regression, XGBoost, Decision Trees."
"ML Problem Type: Classification (Binary/Multiclass)";"Supervised learning task to assign data points to predefined discrete categories or classes. Binary = 2 classes (e.g., spam/not spam). Multiclass = >2 classes (e.g., object types in image). Key Algorithms: Logistic Regression, SVM, XGBoost, Decision Trees, Neural Networks."
"ML Problem Type: Clustering";"Unsupervised learning task to group similar data points together based on inherent patterns or features, without predefined labels. Example: Customer segmentation, grouping news articles. Key Algorithms: K-Means, DBSCAN."
"ML Problem Type: Reinforcement Learning (RL)";"Learning through trial-and-error by receiving rewards or penalties for actions taken in an environment. Example: Game playing AI, robotics control, optimizing recommendation systems. (Note: Less commonly tested in detail than supervised/unsupervised, but good to know concept)."
"ML Problem Domain: Natural Language Processing (NLP)";"Field focused on enabling computers to understand, interpret, and generate human language (text or speech). Examples: Sentiment analysis, machine translation, chatbots, text summarization. AWS Services: Comprehend, Translate, Lex, Transcribe, Polly, Bedrock. SageMaker Algos: BlazingText, Seq2Seq."
"ML Problem Domain: Computer Vision (CV)";"Field focused on enabling computers to ""see"" and interpret visual information from images or videos. Examples: Image classification, object detection, facial recognition. AWS Services: Rekognition. SageMaker Algos: Image Classification, Object Detection, Semantic Segmentation."
"ML Problem Type: Time-Series Forecasting";"Predicting future values based on historical time-ordered data points. Examples: Forecasting sales, demand, website traffic. AWS Services: Amazon Forecast. SageMaker Algos: DeepAR."
"ML Problem Type: Anomaly Detection";"Identifying rare items, events, or observations which differ significantly from the majority of the data (outliers). Examples: Fraud detection, network intrusion detection, identifying defective manufacturing parts. SageMaker Algos: Random Cut Forest."
"ML Problem Domain: Recommendation Systems";"Predicting user preferences or ratings for items (products, movies, articles) to provide personalized suggestions. AWS Services: Amazon Personalize. Can also involve custom models using various techniques (collaborative filtering, content-based)."
"ML Problem Domain: Generative AI";"Field focused on creating models that can generate new content (text, images, audio, code) that mimics human creativity. AWS Services: Amazon Bedrock, SageMaker JumpStart (for hosting/fine-tuning FMs)."